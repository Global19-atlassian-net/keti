#!/usr/bin/env groovy

final def mavenOpts = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'

pipeline {
    agent {
        kubernetes {
            label 'migration'
        }
    }
    tools {
        maven 'apache-maven-latest'
        jdk 'adoptopenjdk-hotspot-jdk8-latest'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr:'10'))
        skipDefaultCheckout()
    }
    stages {
        stage('Checkout Git repositories') {
            failFast true
            parallel {
                stage('Pull request') {
                    when {
                        changeRequest()
                    }
                    steps {
                        dir('keti') {
                            checkout(
                                [ $class: 'GitSCM',
                                  branches: [ [ name: env.CHANGE_BRANCH ] ],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions: [ [ $class: 'SubmoduleOption',
                                                  disableSubmodules: false,
                                                  parentCredentials: true,
                                                  recursiveSubmodules: true,
                                                  reference: '',
                                                  trackingSubmodules: true ] ],
                                  submoduleCfg: [ ],
                                  userRemoteConfigs: [ [ credentialsId: '670c4a5c-7db1-4a51-9706-e49458224cda',
                                                         url: 'https://github.com/eclipse/keti' ] ] ]
                            )
                        }
                    }
                }
                stage('Non-pull-request') {
                    when {
                        not {
                            changeRequest()
                        }
                    }
                    steps {
                        dir('keti') {
                            checkout(
                                [ $class: 'GitSCM',
                                  branches: [ [ name: env.BRANCH_NAME ] ],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions: [ [ $class: 'SubmoduleOption',
                                                  disableSubmodules: false,
                                                  parentCredentials: true,
                                                  recursiveSubmodules: true,
                                                  reference: '',
                                                  trackingSubmodules: true ] ],
                                  submoduleCfg: [ ],
                                  userRemoteConfigs: [ [ credentialsId: '670c4a5c-7db1-4a51-9706-e49458224cda',
                                                         url: 'https://github.com/eclipse/keti' ] ] ]
                            )
                        }
                    }
                }
            }
        }
        stage('Run post-SCM-checkout operations') {
            steps {
                sh """#!/bin/bash -xe
                    ls -altr keti keti/kotlin

                    rm -rf public
                    mkdir public
                    cp -a keti public/keti

                    rm -rf public-kt
                    mkdir public-kt
                    cp -a keti public-kt/keti

                    rm -rf public-graph
                    mkdir public-graph
                    cp -a keti public-graph/keti

                    rm -rf public-graph-kt
                    mkdir public-graph-kt
                    cp -a keti public-graph-kt/keti
                """
            }
        }
        stage("Build and run non-hierarchical unit tests (Java)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public/keti && mvn clean package install ${mavenOpts} -P public -D maven.repo.local=${env.WORKSPACE}/m2-public
                """
            }
            post {
                always {
                    junit testResults : '**/public/**/surefire-reports*/junitreports/TEST*.xml, **/public/**/surefire-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Build and run non-hierarchical unit tests (Kotlin)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-kt/keti/kotlin && mvn clean package install ${mavenOpts} -P public -D maven.repo.local=${env.WORKSPACE}/m2-public-kt
                """
            }
            post {
                always {
                    junit testResults : '**/public-kt/**/surefire-reports*/junitreports/TEST*.xml, **/public-kt/**/surefire-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Build and run hierarchical unit tests (Java)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-graph/keti && mvn clean package install ${mavenOpts} -P public-graph -D maven.repo.local=${env.WORKSPACE}/m2-public-graph
                """
            }
            post {
                always {
                    junit testResults : '**/public-graph/**/surefire-reports*/junitreports/TEST*.xml, **/public-graph/**/surefire-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Build and run hierarchical unit tests (Kotlin)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-graph-kt/keti/kotlin && mvn clean package install ${mavenOpts} -P public-graph -D maven.repo.local=${env.WORKSPACE}/m2-public-graph-kt
                """
            }
            post {
                always {
                    junit testResults : '**/public-graph-kt/**/surefire-reports*/junitreports/TEST*.xml, **/public-graph-kt/**/surefire-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Run non-hierarchical integration tests (Java)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public/keti && export PORT_OFFSET=10 && source ./set-env-local.sh && cd acs-integration-tests && mvn clean verify ${mavenOpts} -P public -D maven.repo.local=${env.WORKSPACE}/m2-public
                """
            }
            post {
                always {
                    junit testResults : '**/public/**/failsafe-reports*/junitreports/TEST*.xml, **/public/**/failsafe-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Run non-hierarchical integration tests (Kotlin)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-kt/keti/kotlin && export PORT_OFFSET=20 && source ./set-env-local.sh && cd acs-integration-tests && mvn clean verify ${mavenOpts} -P public -D maven.repo.local=${env.WORKSPACE}/m2-public-kt
                """
            }
            post {
                always {
                    junit testResults : '**/public-kt/**/failsafe-reports*/junitreports/TEST*.xml, **/public-kt/**/failsafe-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Run hierarchical integration tests (Java)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-graph/keti && export PORT_OFFSET=30 && source ./set-env-local.sh && cd acs-integration-tests && mvn clean verify ${mavenOpts} -P public-graph -D maven.repo.local=${env.WORKSPACE}/m2-public-graph
                """
            }
            post {
                always {
                    junit testResults : '**/public-graph/**/failsafe-reports*/junitreports/TEST*.xml, **/public-graph/**/failsafe-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
        stage("Run hierarchical integration tests (Kotlin)") {
            steps {
                sh """#!/bin/bash -xe
                    cd public-graph-kt/keti/kotlin && export PORT_OFFSET=40 && source ./set-env-local.sh && cd acs-integration-tests && mvn clean verify ${mavenOpts} -P public-graph -D maven.repo.local=${env.WORKSPACE}/m2-public-graph-kt
                """
            }
            post {
                always {
                    junit testResults : '**/public-graph-kt/**/failsafe-reports*/junitreports/TEST*.xml, **/public-graph-kt/**/failsafe-reports*/**/junitreports/TEST*.xml',
                          allowEmptyResults : true
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
